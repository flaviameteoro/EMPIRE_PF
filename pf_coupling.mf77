*ID PFCOUPLING
*/Mod to add extra routines to enable comms with pf coupler
*DECLARE U_MODEL1
*I GPB5F403.95
            CALL FROMCOUPLER (
*CALL ARGSIZE
*CALL ARTD1 
*CALL ARTDUMA 
*CALL ARTDUMO
*CALL ARTDUMW 
*CALL ARTCONA
*CALL ARTPTRA 
*CALL ARTSTS 
*CALL ARGPPX 
     &          ICODE,CMESSAGE)
*I U_MODEL1.87
            CALL PF_COUPLER (
*CALL ARGSIZE
*CALL ARTD1 
*CALL ARTDUMA 
*CALL ARTDUMO
*CALL ARTDUMW 
*CALL ARTCONA
*CALL ARTPTRA 
*CALL ARTSTS 
*CALL ARGPPX 
     & submodel,
     &          ICODE,CMESSAGE)
*I U_MODEL1.122
            CALL PF_COUPLER (
*CALL ARGSIZE
*CALL ARTD1 
*CALL ARTDUMA 
*CALL ARTDUMO
*CALL ARTDUMW 
*CALL ARTCONA
*CALL ARTPTRA 
*CALL ARTSTS 
*CALL ARGPPX 
     & submodel,
     &          ICODE,CMESSAGE)
*I U_MODEL1.130
            CALL PF_COUPLER (
*CALL ARGSIZE
*CALL ARTD1 
*CALL ARTDUMA 
*CALL ARTDUMO
*CALL ARTDUMW 
*CALL ARTCONA
*CALL ARTPTRA 
*CALL ARTSTS 
*CALL ARGPPX 
     & submodel,
     &          ICODE,CMESSAGE)


*DECLARE UMSHELL1
*I GSS1F305.867
      INTEGER MY_MPI_COMMUNICATOR ! Local MPI Communicator
      INTEGER GLOBAL_MPI_COMMUNICATOR  ! Global MPI Communicator
      integer couple_mpi_communicator,couple_myrank,couple_nproc,
     $     couple_root
      common/pf_couple/COUPLE_MPI_COMMUNICATOR,couple_myRank,
     $       couple_nProc,couple_root
      integer mype_id,mycolour,e_um_npes,info,int_log,couple_colour
      integer MPL_UNDEFINED, MPL_INTEGER8,MPL_MAX
      character*180 stdout_basename1
      include "mpif.h"
      MPL_UNDEFINED=mpi_undefined
      MPL_INTEGER8=MPI_INTEGER8
      MPL_MAX=MPI_MAX
*D GPB0F402.396
c      CALL GC_INIT(parexe_env,mype,nproc_max)
      e_um_npes=32
      CALL GC_INIT_INTRO(GLOBAL_MPI_COMMUNICATOR)
      CALL MPL_COMM_RANK(GLOBAL_MPI_COMMUNICATOR,mype_id,err)
      mycolour = mype_id / e_um_npes      
      CALL MPL_COMM_SPLIT(GLOBAL_MPI_COMMUNICATOR,mycolour, 
     &     mype_id,MY_MPI_COMMUNICATOR,err)
      CALL GC_INIT_FINAL(mype,nproc_max,MY_MPI_COMMUNICATOR)
      write(6,"(a,i2,i2,i2)") 'hello1',mype_id,mycolour,mype


        if (mype.eq.0) then
           couple_colour=9999
        else
           couple_colour=MPL_UNDEFINED
        endif

        CALL MPL_COMM_SPLIT(GLOBAL_MPI_COMMUNICATOR,couple_colour, 
     $       mype_id,COUPLE_MPI_COMMUNICATOR,err)

        if (mype.eq.0) then 
         call MPl_Comm_Rank (COUPLE_MPI_COMMUNICATOR,couple_myRank,err)
         call MPl_Comm_Size (COUPLE_MPI_COMMUNICATOR,couple_nProc,err)

         couple_root=0
         call MPL_allreduce(0,couple_root,1,MPL_INTEGER8,MPL_MAX,
     $        COUPLE_MPI_COMMUNICATOR,err)
           write(6,"(a,i2,i2,i2,i2,i2,i2)") 'hello2',
     $          mype_id,mycolour,mype,couple_myRank,
     $        couple_nProc,couple_root
        else
           couple_myRank=-1
           couple_nProc=-1
           couple_root=-1
        endif


        int_log=mype_id
        CALL GC_IMAX(1,e_um_npes,info,int_log)
        write(6,"(a,i2,i2,i2,i2)") 'hello3',mype_id,mycolour,mype,
     $       int_log

*I APB1F402.312
        IF (mycolour .LT. 10) THEN
          WRITE(stdout_basename1,'(A,I1)')
     &      stdout_basename(1:len_basename),mycolour
        ELSEIF (mycolour .LT. 100) THEN
          WRITE(stdout_basename1,'(A,I2)')
     &      stdout_basename(1:len_basename),mycolour
        ELSEIF (mycolour .LT. 1000) THEN
          WRITE(stdout_basename1,'(A,I3)')
     &      stdout_basename(1:len_basename),mycolour
        ELSE
          WRITE(stdout_basename1,'(A,I4)')
     &      stdout_basename(1:len_basename),mycolour
        ENDIF
        stdout_basename=stdout_basename1
        len_basename=GET_CHAR_LEN(stdout_basename)
        stdout_basename=stdout_basename(1:len_basename)//'.'


        len_basename=GET_CHAR_LEN(stdout_basename)

*DECK PF_COUP
      SUBROUTINE PF_COUPLER ( 
*CALL ARGSIZE 
*CALL ARGD1
*CALL ARGDUMA
*CALL ARGDUMO  
*CALL ARGDUMW 
*CALL ARGCONA  
*CALL ARGPTRA  
*CALL ARGSTS 
*CALL ARGPPX
     $     submodel,
     &           ICODE,CMESSAGE)

      IMPLICIT NONE
*CALL CMAXSIZE  
*CALL CSUBMODL  
*CALL TYPSIZE  
*CALL NSTYPES
*CALL TYPD1    
*CALL TYPDUMA
*CALL TYPDUMO 
*CALL TYPDUMW  
*CALL TYPCONA 
*CALL TYPPTRA  
*CALL TYPSTS  
*CALL PPXLOOK
*CALL PARVARS
*CALL GCCOM
*CALL DECOMPTP
*CALL TYPPTRO
      INTEGER ICODE            ! OUT - Error return code
      CHARACTER*80 CMESSAGE

      integer a_num_fields,o_num_fields,a_size,o_size
      integer submodel
      write(6,*)'subhello1',submodel
      CALL CHANGE_DECOMPOSITION(decomp_standard_atmos,ICODE)
      a_size=glsize(1)*glsize(2)
      CALL CHANGE_DECOMPOSITION(decomp_standard_ocean,ICODE)
      o_size=glsize(1)*glsize(2)

      if (submodel.eq.ocean_sm) then
         CALL CHANGE_DECOMPOSITION(decomp_standard_ocean,ICODE)
      else
         CALL CHANGE_DECOMPOSITION(decomp_standard_atmos,ICODE)
      endif

!      if (submodel.ne.atmos_sm) return


      a_num_fields=p_levels*4+1
      o_num_fields=KM*4

      CALL PF_COUPLER_WORK (
*CALL ARGSIZE
     &  a_size,o_size,a_num_fields,o_num_fields,
     &  D1(JPSTAR),D1(JU(1)),D1(JV(1)),D1(JTHETA(1)),D1(JQ(1)),
     &  D1(joc_tracer(1,1)),D1(joc_tracer(2,1)),
     &  D1(joc_u(1)),D1(joc_v(1)),
     &  submodel)
      RETURN
      END

      SUBROUTINE PF_COUPLER_WORK (
*CALL ARGSIZE
     &  a_size,o_size,a_num_fields,o_num_fields,
     &  PSTAR_LOCAL,U_LOCAL,V_LOCAL,THETA_LOCAL,Q_LOCAL,
     &  o_t_local,o_sal_local,o_u_local,o_v_local,
     &  submodel)

      IMPLICIT NONE
*CALL CMAXSIZE  
*CALL CSUBMODL  
*CALL TYPSIZE  
*CALL PARVARS
*CALL GCCOM
*CALL DECOMPTP

      integer a_num_fields,o_num_fields,a_size,o_size
      integer icode,a_index,o_index

      REAL
     & PSTAR_LOCAL(P_FIELD),
     & U_LOCAL(U_FIELD,P_LEVELS),
     & V_LOCAL(U_FIELD,P_LEVELS),
     & THETA_LOCAL(P_FIELD,P_LEVELS),
     & Q_LOCAL(P_FIELD,P_LEVELS)

      real
     &   o_t_local (imt,jmt,km),
     &   o_sal_local (imt,jmt,km),
     &   o_u_local(imt,jmt-1,km), o_v_local(imt,jmt-1,km)

      


      INTEGER info,level,i,j,all_size,submodel

      REAL
     & WORK_GLOBAL(A_SIZE*a_num_fields+o_size*o_num_fields),
     & WORK_GLOBAL1(A_SIZE*a_num_fields+o_size*o_num_fields)

!      common/pf_data/work_global

      integer MPL_REAL8
      include "mpif.h"

      integer couple_mpi_communicator,couple_myrank,couple_nproc,
     $     couple_root
      common/pf_couple/COUPLE_MPI_COMMUNICATOR,couple_myRank,
     $       couple_nProc,couple_root

      integer err,status(MPI_STATUS_SIZE)
      MPL_REAL8=MPI_REAL8


      all_size=A_SIZE*a_num_fields+o_size*o_num_fields

      if (mype.eq.0) then
         do i=1,all_SIZE
            WORK_GLOBAL(i)=0.0
            WORK_GLOBAL1(i)=0.0
         enddo
      endif
!ATMOS
      CALL CHANGE_DECOMPOSITION(decomp_standard_atmos,ICODE)
      
      a_index=1
        CALL GATHER_FIELD(PSTAR_LOCAL(1),WORK_GLOBAL(a_index),
     &                  lasize(1),lasize(2),
     &                  glsize(1),glsize(2),
     &                  0,GCG_ALL,
     &                  info)
         a_index=a_index+a_size


      do level=1,p_levels
        CALL GATHER_FIELD(U_LOCAL(1,LEVEL),
     &                  WORK_GLOBAL(a_index),
     &                  lasize(1),lasize(2),
     &                  glsize(1),glsize(2)-1,
     &                  0,GCG_ALL,
     &                  info)
         a_index=a_index+a_size
      enddo
      do level=1,p_levels

        CALL GATHER_FIELD(V_LOCAL(1,LEVEL),
     &                  WORK_GLOBAL(a_index),
     &                  lasize(1),lasize(2),
     &                  glsize(1),glsize(2),
     &                  0,GCG_ALL,
     &                  info)
         a_index=a_index+a_size
      enddo
      do level=1,p_levels

        CALL GATHER_FIELD(THETA_LOCAL(1,LEVEL),
     &                  WORK_GLOBAL(a_index),
     &                  lasize(1),lasize(2),
     &                  glsize(1),glsize(2),
     &                  0,GCG_ALL,
     &                  info)
         a_index=a_index+a_size
      enddo
      do level=1,p_levels

        CALL GATHER_FIELD(Q_LOCAL(1,LEVEL),
     &                  WORK_GLOBAL(a_index),
     &                  lasize(1),lasize(2),
     &                  glsize(1),glsize(2),
     &                  0,GCG_ALL,
     &                  info)
         a_index=a_index+a_size
      enddo

      write(6,*)'iihello',a_index,a_size,a_num_fields,a_index/a_size

!Ocean
      o_index=1+a_size*a_num_fields
      CALL CHANGE_DECOMPOSITION(decomp_standard_ocean,ICODE)
      do level=1,km

        CALL GATHER_FIELD(o_t_LOCAL(1,1,LEVEL),
     &                  WORK_GLOBAL(o_index),
     &                  lasize(1),lasize(2),
     &                  glsize(1),glsize(2),
     &                  0,GCG_ALL,
     &                  info)
         o_index=o_index+o_size
      enddo

      do level=1,km

        CALL GATHER_FIELD(o_sal_LOCAL(1,1,LEVEL),
     &                  WORK_GLOBAL(o_index),
     &                  lasize(1),lasize(2),
     &                  glsize(1),glsize(2),
     &                  0,GCG_ALL,
     &                  info)
         o_index=o_index+o_size
      enddo

      do level=1,km

        CALL GATHER_FIELD(o_u_LOCAL(1,1,LEVEL),
     &                  WORK_GLOBAL(o_index),
     &                  lasize(1),lasize(2),
     &                  glsize(1),glsize(2),
     &                  0,GCG_ALL,
     &                  info)
         o_index=o_index+o_size
      enddo

      do level=1,km

        CALL GATHER_FIELD(o_v_LOCAL(1,1,LEVEL),
     &                  WORK_GLOBAL(o_index),
     &                  lasize(1),lasize(2),
     &                  glsize(1),glsize(2),
     &                  0,GCG_ALL,
     &                  info)
         o_index=o_index+o_size
      enddo


      if (mype.eq.0) then
           call MPL_Send(WORK_GLOBAL,All_SIZE,
     $     MPL_REAL8,couple_root,1,couple_mpi_communicator,err)
           write(6,*)'shello',All_size,couple_root
!           write(6,*)work_global(a_size*a_num_fields:)
           call flush(6)
      endif



        if (mype.eq.0) then
           call MPL_Recv(WORK_GLOBAL1,All_SIZE,
     $     MPL_REAL8,couple_root,1,couple_mpi_communicator,status,err)
           write(6,*)'rhello',All_size,couple_root
        endif

!Atmos
        if (submodel.eq.atmos_sm) then 
      CALL CHANGE_DECOMPOSITION(decomp_standard_atmos,ICODE)

        a_index=1
        CALL SCATTER_FIELD(PSTAR_LOCAL(1),WORK_GLOBAL(a_index),
     &                  lasize(1),lasize(2),
     &                  glsize(1),glsize(2),
     &                  0,GCG_ALL,
     &                  info)
        a_index=a_index+a_size


      do level=1,p_levels

        CALL SCATTER_FIELD(U_LOCAL(1,LEVEL),
     &                  WORK_GLOBAL(a_index),
     &                  lasize(1),lasize(2),
     &                  glsize(1),glsize(2)-1,
     &                  0,GCG_ALL,
     &                  info)
        a_index=a_index+a_size
      enddo
      do level=1,p_levels

        CALL SCATTER_FIELD(V_LOCAL(1,LEVEL),
     &                  WORK_GLOBAL(a_index),
     &                  lasize(1),lasize(2),
     &                  glsize(1),glsize(2),
     &                  0,GCG_ALL,
     &                  info)
        a_index=a_index+a_size
      enddo
      do level=1,p_levels

        CALL SCATTER_FIELD(THETA_LOCAL(1,LEVEL),
     &                  WORK_GLOBAL(a_index),
     &                  lasize(1),lasize(2),
     &                  glsize(1),glsize(2),
     &                  0,GCG_ALL,
     &                  info)
         a_index=a_index+a_size
      enddo
      do level=1,p_levels

        CALL SCATTER_FIELD(Q_LOCAL(1,LEVEL),
     &                  WORK_GLOBAL(a_index),
     &                  lasize(1),lasize(2),
     &                  glsize(1),glsize(2),
     &                  0,GCG_ALL,
     &                  info)
         a_index=a_index+a_size
      enddo
	
      elseif (submodel.eq.ocean_sm) then 

      write(6,*)'ohello'
      call flush(6)
!Ocean
      CALL CHANGE_DECOMPOSITION(decomp_standard_ocean,ICODE)
      o_index=1+a_size*a_num_fields

      do level=1,km
        CALL SCATTER_FIELD(o_t_LOCAL(1,1,LEVEL),
     &                  WORK_GLOBAL(o_index),
     &                  lasize(1),lasize(2),
     &                  glsize(1),glsize(2),
     &                  0,GCG_ALL,
     &                  info)
         o_index=o_index+o_size
      enddo

      do level=1,km
        CALL SCATTER_FIELD(o_sal_LOCAL(1,1,LEVEL),
     &                  WORK_GLOBAL(o_index),
     &                  lasize(1),lasize(2),
     &                  glsize(1),glsize(2),
     &                  0,GCG_ALL,
     &                  info)
         o_index=o_index+o_size
      enddo

      do level=1,km
        CALL SCATTER_FIELD(o_u_LOCAL(1,1,LEVEL),
     &                  WORK_GLOBAL(o_index),
     &                  lasize(1),lasize(2),
     &                  glsize(1),glsize(2),
     &                  0,GCG_ALL,
     &                  info)
         o_index=o_index+o_size
      enddo

      do level=1,km
        CALL SCATTER_FIELD(o_v_LOCAL(1,1,LEVEL),
     &                  WORK_GLOBAL(o_index),
     &                  lasize(1),lasize(2),
     &                  glsize(1),glsize(2),
     &                  0,GCG_ALL,
     &                  info)
         o_index=o_index+o_size
      enddo

      endif

        if (mype.eq.0) then
           write(6,*)'ihello1',level,work_global(100+o_index),
     $         work_global1(100+o_index)

      call flush(6)
        endif

      RETURN
      END


*DECK FROMCOUPLER
      SUBROUTINE FROMCOUPLER ( 
*CALL ARGSIZE 
*CALL ARGD1
*CALL ARGDUMA
*CALL ARGDUMO  
*CALL ARGDUMW 
*CALL ARGCONA  
*CALL ARGPTRA  
*CALL ARGSTS 
*CALL ARGPPX 
     &           ICODE,CMESSAGE) 
      IMPLICIT NONE
*CALL CMAXSIZE  
*CALL CSUBMODL  
*CALL TYPSIZE  
*CALL NSTYPES
*CALL TYPD1    
*CALL TYPDUMA
*CALL TYPDUMO 
*CALL TYPDUMW  
*CALL TYPCONA 
*CALL TYPPTRA  
*CALL TYPSTS  
*CALL PPXLOOK

      INTEGER ICODE            ! OUT - Error return code
      CHARACTER*80 CMESSAGE

      RETURN
      END
