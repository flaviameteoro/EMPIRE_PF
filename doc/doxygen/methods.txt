/*! \page methods Assimilation Methods
\section methods_filters Filters
The filters implemented in EMPIRE can be divided into two categories, particle filters and Ensemble Kalman filters

\subsection methods_pfs Particle filters
\subsubsection SIRfilter SIR Filter (Sequential Importance Resampling) 
See file @ref sir_filter \n
<a href="http://dx.doi.org/10.1049/ip-f-2.1993.0015">Gordon, Salmond and Smith (1993)</a>.\n
Model specific operations required: \n
  - \link qhalf \endlink
  - \link h \endlink
  - \link solve_r \endlink \n
The SIR filter has no parameters to be chosen. \n


To select the SIR filter, in \link pf_control::parse_pf_parameters empire.nml \endlink set the following variables:
   - \link pf_control::pf_control_type::filter filter \endlink = 'SI'
\subsubsection EWPF Equivalent Weights Particle Filter 
See files @ref proposal_filter @ref equivalent_weights_filter\n
<a href="http://doi.wiley.com/10.1002/qj.699">Van Leeuwen (2010)</a>.\n
Model specific operations required:
 - \link qhalf \endlink
 - \link q \endlink
 - \link h \endlink
 - \link ht \endlink
 - \link solve_r \endlink
 - \link solve_hqht_plus_r \endlink

The Equivalent Weights particle filter has a number of free parameters to be chosen. \n
   - \link pf_control::pf_control_type::nudgefac nudgefac\endlink
   - \link pf_control::pf_control_type::nfac nfac \endlink
   - \link pf_control::pf_control_type::ufac ufac \endlink
   - \link pf_control::pf_control_type::keep keep \endlink
   - \link pf_control::pf_control_type::relaxation_type relaxation_type \endlink
   - \link pf_control::pf_control_type::relaxation_freetime relaxation_freetime \endlink
   - (Possibly) \link pf_control::pf_control_type::power_law_p power_law_p \endlink \n
   

To select the EWPF, in \link pf_control::parse_pf_parameters empire.nml \endlink set the following variables:
   - \link pf_control::pf_control_type::filter filter \endlink = 'EW'

\subsubsection EZPF The Zhu and Van Leeuwen Equivalent Weights Particle Filter 
See files @ref proposal_filter @ref equivalent_weights_filter_zhu\n
Model specific operations required:
 - \link qhalf \endlink
 - \link q \endlink
 - \link h \endlink
 - \link ht \endlink
 - \link solve_r \endlink
 - \link solve_rhalf \endlink
 - \link solve_hqht_plus_r \endlink

The Zhu Equivalent Weights particle filter has a number of free parameters to be chosen. \n
   - \link pf_control::pf_control_type::nudgefac nudgefac\endlink
   - \link pf_control::pf_control_type::relaxation_type relaxation_type \endlink
   - \link pf_control::pf_control_type::relaxation_freetime relaxation_freetime \endlink
   - (Possibly) \link pf_control::pf_control_type::power_law_p power_law_p \endlink \n


To select the EZPF, in \link pf_control::parse_pf_parameters empire.nml \endlink set the following variables:
   - \link pf_control::pf_control_type::filter filter \endlink = 'EZ'


\subsection methods_enkfs Ensemble Kalman filters

\subsubsection LETKF LETKF (The Localised Ensemble Transform Kalman Filter)
See file  @ref letkf_analysis \n
<a href="http://dx.doi.org/10.1016/j.physd.2006.11.008">Hunt, Kostelich and Szunyogh (2007)</a>. \n
Model specific operations required: \n
 - \link h \endlink
 - \link solve_rhalf \endlink
 - \link dist_st_ob \endlink \n


The LETKF has a number of free parameters to be chosen. \n
   - \link pf_control::pf_control_type::rho rho \endlink
   - \link pf_control::pf_control_type::len len \endlink \n 


To select the LETKF, in \link pf_control::parse_pf_parameters empire.nml \endlink set the following variables:
   - \link pf_control::pf_control_type::filter filter \endlink = 'LE' or 'LD' with LE including model error but LD being deterministic


\section methods_smoothers Smoothers

Coming at some point in the future: LETKS (Please contact us if you want us to develop this sooner rather than later)


\section methods_var Variational Methods

\subsection threedvar 3DVar

See files @ref threedvar_fcn \n

Model specific operations required:
 - \link h \endlink
 - \link ht \endlink
 - \link solve_b \endlink
 - \link solve_r \endlink

3DVar can be used as a filter in a sequential run. Each particle uses its current forecast as a background guess for an independent 3DVar minimization.


\subsection fourdEnVar 4dEnVar

See files @ref fourdenvar @ref fourdenvar_fcn \n
<a href="http://dx.doi.org/10.1175/2008MWR2312.1">Liu, Xian and Wang (2008)</a>.\n

Model specific operations required:
 - \link h \endlink
 - \link solve_r \endlink

Currently there is the basic functionality to do 4dEnVar so long as the optional reverse communication is used. This is work in progress.

\todo Finish the following description.

The following is a stream of consciousness about how to use 4dEnVar.

Firstly note that 4dEnVar is built into a different executable: \c empire-4denvar. Make sure to launch that along with the models.

In order to solve the 4DEnVar problem, we have one ensemble member representing the desired analysis, and the others representing the perturbations. Hence to use N ensemble members to calculate the gradient, one must launch the code with N+1 ensemble members in total.

The main program, FourDEnVar is located in src/4dEnVar/4dEnVar.f90.

The first thing it does is read from vardata.nml or empire.nml a namelist called \c var_params, that contains the options for the optimization method. 
 See var_data::parse_vardata for information on this.

The next important thing to specify is the observation window, specifically when and how many observations there will be throughout the window. This is currently done with the hard-coded var_data::read_observation_numbers subroutine. What is needed is for the array vardata\%ny to contain a list of the number of observations at each timestep throughout the window. As an example, suppose the observation window was 10 timesteps long, and we had 8 observations at timestep 3, 2 observations at timestep 5 and 43 observations at timestep 9, then the array vardata\%ny should contain the numbers [0 0 8 0 2 0 0 0 43 0]. How this is implemented should probably change. This isn't done well as we have had no users who have contacted us saying they wish to use this method - hence we do not know what format would work best for them. Please get in touch if you want to use it!

\todo Put in a form of localisation into 4DEnVar

*/
